vars:
  colors:
    tc:
      grey: oklch(0.765 0 89.9)
      green: oklch(0.679 0.092 138.1)
      blue: oklch(0.686 0.064 255.3)
      pink: oklch(0.703 0.071 332.1)
      orange: oklch(0.693 0.099 79.6)
      red: oklch(0.6059 0.1502 18.01)
      pink2: oklch(0.6 0.1 0)
      peach: oklch(0.679 0.088 40.8)
      yellow: oklch(0.803 0.077 103.6)
      apricot: oklch(0.73 0.072 66.3)
      petal: oklch(0.725 0.068 347.5)
      purple: oklch(0.656 0.070 307.3)
      gold: oklch(0.8 0.16 90)
      white: oklch(0.8 0.03 102)
      variableBlue: oklch(0.701 0.056 255.3)
      constantGreen: oklch(0.684 0.082 138)
      classGold: oklch(0.747 0.069 91.8)
      keywordPurple: oklch(0.714 0.061 331.9)
      headerOrange: oklch(0.704 0.075 47.6)
      fadedGrey: oklch(0.624 0 89.9)

  deg:
    faint: 5
    weak: 15
    mid: 50
    strong: 85
    major: 95

  scope:
    # Basic structural elements
    comment: mix($colors.tc.blue, $colors.tc.pink, 75)
    text: $colors.tc.blue
    punctuation: $colors.tc.blue
    baseText: $colors.tc.white

    # Universal "self" concepts (this, self, base, super)
    selfRef: $colors.tc.peach

    # Universal literals
    string: $colors.tc.green
    number: $colors.tc.blue
    boolean: $colors.tc.green

    # Universal identifiers
    variable: $colors.tc.variableBlue
    parameter: $colors.tc.variableBlue
    property: $colors.tc.pink2
    constant: $colors.tc.constantGreen

    # Universal callables
    function: $colors.tc.orange
    method: $colors.tc.orange

    # Universal type system
    types: $colors.tc.constantGreen
    class: $colors.tc.classGold
    namespace: $colors.tc.classGold

    # Universal language constructs
    keyword: $colors.tc.keywordPurple
    storage: $colors.tc.blue
    storage.modifier: $colors.tc.purple
    operator: $colors.tc.purple
    operator2: $colors.tc.keywordPurple

    # Universal structural
    attribute: $colors.tc.gold
    declaration: $colors.tc.classGold
    embeddedLanguage: $colors.tc.classGold

    # Markup and documentation
    header: $colors.tc.headerOrange
    code: $colors.teal
    link: $colors.tc.gold

    # String interpolation (different from strings)
    interpolation: $colors.tc.keywordPurple

    # Language-specific snowflakes
    rustOwnership: $colors.tc.keywordPurple
    rubyGlobal: $colors.tc.headerOrange
    rubyClass: $colors.tc.variableBlue
    rubyInstance: $colors.tc.variableBlue
    rubyLocal: $colors.tc.constantGreen

    # CSS-specific
    cssSelector: $colors.tc.keywordPurple
    cssProperty: $colors.tc.constantGreen
    cssValue: $colors.tc.variableBlue

    # Legacy/migration
    text2: $colors.tc.fadedGrey
    constant2: $colors.tc.classGold
    className: $colors.tc.orange
    self: $colors.tc.peach

theme:
  tokenColors:
    - settings:
        foreground: $scope.text

    # #########################################################################
    # Makefile
    # #########################################################################

    - name: Makefile Prerequisites
      scope: meta.scope.prerequisites.makefile, markup
      settings:
        foreground: $scope.declaration
    - name: Makefile Recipe
      scope: meta.scope, meta.scope.recipe.makefile, meta.scope.recipe
      settings:
        foreground: $scope.constant

    # #########################################################################
    # Markdown/Markup
    # #########################################################################

    - name: Markdown bold
      scope: markup.bold.markdown
      settings:
        fontStyle: bold

    - name: Markdown italic
      scope: markup.italic.markdown
      settings:
        fontStyle: italic

    - name: Markdown Header
      scope: markup.heading, comment
      settings:
        fontStyle: bold

    # #########################################################################
    # General scopes that apply across many/most languages agnostically.
    #
    # This is last because of specificity by order of appearance. Scopes
    # defined here will not match if there is a more language-specific match
    # earlier. You want those to match because they're more unique to that
    # language.
    # #########################################################################

    - name: Plain Text
      scope: meta.paragraph, text.html, meta.jsx.children, doctype
      settings:
        foreground: $scope.baseText

    - name: Control Keywords (if/for/return/etc)
      scope: keyword.control, meta.at-rule,
        meta.var.expr keyword.control.export, keyword.other.using,
        meta.preprocessor, keyword.other.namespace, keyword.preprocessor,
        keyword.other.special-method, def.meta, meta.require,
        keyword.other.crate, meta.use, keyword.package, keyword.function,
        keyword.interface, entity.name.goto-label
      settings:
        foreground: $colors.tc.pink

    - name: Self/This/etc
      scope: variable.parameter.function.language.special.self,
        variable.language.special.self, this.class.meta, storage.modifier.this
      settings:
        foreground: $scope.selfRef

    - name: Quoted Strings
      scope: string.quoted, string.unquoted.heredoc,
        jsx.children.objectliteral.expression.embedded.tag.string.block,
        meta.string-contents
      settings:
        foreground: $scope.string

    - name: Functions/Methods
      scope: entity.name.function, meta.definition.method,
        support.function, function.meta, function-call
      settings:
        foreground: $scope.function

    - name: Code Snippets
      scope: markup.inline.raw, markup.fenced_code.block
      settings:
        foreground: $scope.code

    - name: Embedded Languages
      scope: source.sql.embedded, source.js.embedded, source.css.embedded
      settings:
        foreground: $scope.embeddedLanguage

    - name: Links
      scope: string.other.link.description, meta.image.inline,
        meta.link, string.other.link.title
      settings:
        foreground: $scope.link

    - name: Storage Modifiers (async, const, etc)
      scope: storage.modifier, storage.type.accessor
      settings:
        foreground: $scope.storage.modifier

    - name: Storage types
      scope: entity.name.variable.enum-member, keyword.declaration.abstract,
        keyword.declaration.class, keyword.declaration.enum,
        keyword.declaration.extends, keyword.declaration.extension,
        keyword.declaration.get, keyword.declaration.implements, keyword.other
        keyword.declaration.on, keyword.declaration.set,
        keyword.declaration.typedef, keyword.declaration.with,
        keyword.other.class, keyword.other.delegate,
        keyword.other.enum, keyword.other.event, keyword.other.fn,
        keyword.other.interface, keyword.struct, keyword.type,
        meta.namespace.declaration, storage.type.annotation,
        storage.type.numeric, declaration.keyword
      settings:
        foreground: $scope.declaration

    - name: Storage Modifiers (async, const, etc) - to not mask
      scope: keyword.other
      settings:
        foreground: $scope.storage.modifier

    - name: Storage
      scope: support.module.node, storage.type.primitive.var
      settings:
        foreground: $scope.keyword

    - name: Number
      scope: constant.numeric, entity.other.keyframe-offset
      settings:
        foreground: $scope.number

    - name: Variables
      scope: var-single-variable.variable.readwrite.other.meta,
        support.variable.object.process, entity.name.variable,
        class.variable, instance.variable, global.variable,
      settings:
        foreground: $scope.variable

    - name: Built-in constant
      scope: support.variable.object.node, support.constant,
        constant.character.format.placeholder.other
      settings:
        foreground: $scope.constant

    - name: Module Name
      scope: module.meta, function.object.block.variable.meta,
        entity.name.type.module, support.type.object.module,
        entity.name.type.namespace, entity.name.namespace,
        entity.name.module, entity.name.package
      settings:
        foreground: $scope.namespace

    - name: Type Names
      scope: storage.type.built-in,
        meta.type.annotation, meta.argument-type, meta.protocol-list
      settings:
        foreground: $scope.types

    - name: Storage types - to not mask
      scope: storage.type
      settings:
        foreground: $scope.declaration

    - name: Storage - to not mask
      scope: storage
      settings:
        foreground: $scope.keyword

    - name: String Interpolation Begin and End
      scope: begin.expression.string, end.expression.string,
        punctuation.definition.template-expression.begin,
        punctuation.definition.template-expression.end,
        embedded.begin.string.punctuation,
        embedded.end.string.punctuation
      settings:
        foreground: $scope.interpolation

    - name: String Interpolation Body
      scope: expression.string, embedded.string.punctuation
      settings:
        foreground: $scope.interpolation

    - name: Parameters
      scope: variable.parameter, function.parameters.entity.name.meta,
        variable.other.macro.argument,
        meta.function-call meta.function-call.arguments
      settings:
        foreground: $scope.parameter

    # #########################################################################
    # Classes
    # #########################################################################

    - name: Class Super
      scope: super.meta, support.class.super, meta.inheritance-clause
      settings:
        foreground: $scope.selfRef

    - name: Class names
      scope: entity.name.class, support.class, entity.name.type.class,
        meta.function-call.static, meta.function-call.object, meta.function-call,
        support.other.namespace.use
      settings:
        foreground: $scope.class

    - name: Inherited Class
      scope: entity.other.inherited-class
      settings:
        foreground: $scope.class

    # #########################################################################
    # Tagging/Attributes
    # #########################################################################

    - name: Tag name
      scope: punctuation.definition.tag, entity.name.tag
      settings:
        foreground: $scope.punctuation

    - name: Tag attribute
      scope: entity.other.attribute-name, meta.tag.attributes,
        name.tag.out.plain.unquoted.string.entity
      settings:
        foreground: $scope.attribute

    # #########################################################################
    # RegExp
    # #########################################################################

    - name: RegExp Group Punctuation
      scope: punctuation.definition.group.regexp,
        punctuation.definition.group.no-capture.regexp
      settings:
        foreground: $scope.punctuation

    - name: RegExp Character Class Punctuation
      scope: punctuation.definition.character-class.regexp
      settings:
        foreground: $scope.punctuation

    - name: RegExp Character Class Constants
      scope: constant.other.character-class.regexp,
        constant.other.character-class.set.regexp
      settings:
        foreground: $scope.constant

    - name: RegExp Numeric Escapes
      scope: constant.character.numeric.regexp
      settings:
        foreground: $scope.number

    # #########################################################################
    # Properties
    # #########################################################################

    - name: Property Names
      scope: support.type.property-name, support.type.vendored.property-name,
        meta.property-name, variable.other.property, support.variable.property,
        property.field.declaration.class.meta
      settings:
        foreground: $scope.property

    # #########################################################################
    # Operators for all of the languages
    # #########################################################################

    - name: Operators
      scope: keyword.operator.new, keyword.operator.expression,
        keyword.operator.word.new, keyword.operator.namespace,
        keyword.operator.borrow.and,
        keyword.operator.dereference,
        keyword.operator.key-value,
        keyword.operator.access.dot,
        keyword.operator.bitwise,
        keyword.operator.address
      settings:
        foreground: $scope.operator

    - name: Arithmetic Operators
      scope: keyword.operator.arithmetic
      settings:
        foreground: $scope.operator

    - name: Assignment Operator
      scope: keyword.operator.assignment, punctuation.separator.key-value
      settings:
        foreground: $scope.operator

    - name: Logical Operators
      scope: keyword.operator.logical, keyword.operator.or.regexp,
        keyword.operator.negation.regexp
      settings:
        foreground: $scope.operator
        fontStyle: bold

    - name: General Keyword Operators
      scope: keyword.operator, operator
      settings:
        foreground: $scope.operator

    # #########################################################################
    # Universal fallback rules for common patterns
    # #########################################################################

    - name: Type Names
      scope: entity.name.type, support.type
      settings:
        foreground: $scope.types

    - name: Universal Comments
      scope: comment, punctuation.definition.comment
      settings:
        foreground: $scope.comment
        fontStyle: italic

    - name: Constants
      scope: constant.other, constant.character, variable.other.constant,
        character.constant.entity
      settings:
        foreground: $scope.constant

    - name: Universal Self References
      scope: variable.language.self, variable.language.this,
        variable.language.base, variable.language.super
      settings:
        foreground: $scope.selfRef

    - name: Universal Booleans
      scope: constant.language.boolean, constant.language.null
      settings:
        foreground: $scope.boolean

    - name: Universal String Interpolation
      scope: punctuation.definition.template-expression,
        string.interpolated.expression, punctuation.definition.variable,
        punctuation.section.embedded.begin, punctuation.section.embedded.end
      settings:
        foreground: $scope.interpolation

    - name: Universal Punctuation
      scope: punctuation, begin.brace, end.brace
      settings:
        foreground: $scope.punctuation

    - name: Universal Types Fallback
      scope: namespace, class, enum, interface, struct, typeParameter, type
      settings:
        foreground: $scope.types

    - name: Universal Callables Fallback
      scope: function, method, macro
      settings:
        foreground: $scope.function

    - name: Universal Identifiers Fallback
      scope: parameter, variable, property, enumMember, decorator, event
      settings:
        foreground: $scope.variable

    - name: Universal Literals Fallback
      scope: number, regexp
      settings:
        foreground: $scope.number

    - name: Universal Keywords Fallback
      scope: keyword.declaration, label
      settings:
        foreground: $scope.keyword

    # #########################################################################
    # Final Fallbacks - Broadest possible scopes (NEVER override anything)
    # These are last resort matchers for any unmatched tokens
    # #########################################################################

    - name: Final Fallback - Base Source
      scope: source
      settings:
        foreground: $scope.baseText

    - name: Final Fallback - Generic Keyword
      scope: keyword
      settings:
        foreground: $scope.keyword

    - name: Final Fallback - Generic Constant
      scope: constant
      settings:
        foreground: $scope.constant

    - name: Final Fallback - Generic Constant
      scope: string
      settings:
        foreground: $scope.string
